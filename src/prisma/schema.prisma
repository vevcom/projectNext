generator projectnext {
  provider = "prisma-client-js"
}

generator prismaservice {
  provider = "prisma-client-js"
  output   = "./prismaservice/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String? // Dette er kun for testing
  firstname     String    @default("[Fjernet]")
  lastname      String    @default("[Fjernet]")
  bio           String    @default("")
  sex           String?
  yearOfStudy   Int?      @map("year_of_study")

  studyProgramId Int?          @map("study_program_id")
  studyProgram   StudyProgram? @relation(fields: [studyProgramId], references: [id])

  roles      RolesUsers[]
  OmegaQuote OmegaQuote[]
  accounts   Account[]

  @@map("users")
}

model StudyProgram {
  id            Int     @id @default(autoincrement())
  name          String
  code          String  @unique
  years         Int? // This is not stored in Feide, therefore it is optional
  instituteCode String? @map("institute_code")
  archived      Boolean @default(false)

  users        User[]
  defaultRoles StudyProgramRole[]

  @@map("study_programs")
}

model StudyProgramRole {
  studyProgram   StudyProgram @relation(fields: [studyProgramId], references: [id])
  studyProgramId Int          @map("study_program_id")
  role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int          @map("role_id")

  @@id([studyProgramId, roleId])
  @@map("study_program_roles")
}

enum Permission {
  // Omega Quotes
  OMEGAQUOTES_WRITE
  OMEGAQUOTES_READ

  // Her kommer masse eksempler på tillganger, for nå er de bare for testing

  // Fridge
  USE_MONEY
  USE_FRIDGE
  INFINITE_MONEY

  // Bulshit
  POST_BULSHIT
  VIEW_BULSHIT

  // Events
  PARTICIPATE_IN_EVENTS
  CREATE_EVENTS

  // Minecraft
  CREATIVE_MODE
}

model Role {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  users            RolesUsers[]
  permissions      RolePermission[]
  StudyProgramRole StudyProgramRole[]

  @@map("role")
}

model RolePermission {
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     Int        @map("role_id")
  permission Permission

  @@unique([roleId, permission])
  @@map("role_permission")
}

model RolesUsers {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Image {
  id                   Int              @id @default(autoincrement())
  fsLocation           String           @unique
  fsLocationSmallSize  String?          @unique
  fsLocationMediumSize String?          @unique
  name                 String           @unique
  ext                  String
  alt                  String
  collection           ImageCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  coverImageFor        ImageCollection? @relation(name: "coverImage")
  collectionId         Int
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  cmsImages            CmsImage[]

  @@map("images")
}

model ImageCollection {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  images       Image[]
  coverImage   Image?   @relation(fields: [coverImageId], references: [id], name: "coverImage")
  coverImageId Int?     @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("image_collections")
}

enum ImageSize {
  SMALL
  MEDIUM
  LARGE
}

model CmsImage {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  image          Image?          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  imageSize      ImageSize       @default(MEDIUM) @map("small_image")
  articleSection ArticleSection?
  Article        Article? //Can be cover image for an article

  @@map("cms_images")
}

model CmsParagraph {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  contentMd      String          @default("")
  contentHtml    String          @default("")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  articleSection ArticleSection?

  @@map("cms_paragraphs")
}

model CmsLink {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  url            String          @default("/")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  text           String          @default("Link")
  articleSection ArticleSection?

  @@map("cms_links")
}

enum Position {
  LEFT
  RIGHT
}

model ArticleSection {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  cmsImage       CmsImage?     @relation(fields: [cmsImageId], references: [id], onDelete: SetNull)
  cmsImageId     Int?          @unique
  cmsLink        CmsLink?      @relation(fields: [cmsLinkId], references: [id], onDelete: SetNull)
  cmsLinkId      Int?          @unique
  cmsParagraph   CmsParagraph? @relation(fields: [cmsParagraphId], references: [id], onDelete: SetNull)
  cmsParagraphId Int?          @unique
  imagePosition  Position      @default(RIGHT) @map("image_position")
  imageSize      Int           @default(200)
  article        Article?      @relation(fields: [articleId], references: [id])
  articleId      Int?
  order          Int           @default(autoincrement()) //The order "position" of the article section in the article

  @@unique([articleId, order]) //There can only be one article section with a given order in an article
  @@map("article_sections")
}

model Article {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  articleSections ArticleSection[]
  coverImage      CmsImage         @relation(fields: [coverImageId], references: [id])
  coverImageId    Int              @unique

  @@map("articles")
}

model OmegaQuote {
  id           Int      @id @default(autoincrement())
  author       String
  quote        String
  timestamp    DateTime @default(now())
  userPoster   User     @relation(fields: [userPosterId], references: [id])
  userPosterId Int

  @@map("omega_quotes")
}
