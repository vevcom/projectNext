generator projectnext {
  provider = "prisma-client-js"
}

generator prismaservice {
  provider = "prisma-client-js"
  output   = "./prismaservice/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String // Dette er kun for testing
  firstname   String       @default("[Fjernet]")
  lastname    String       @default("[Fjernet]")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  roles       RolesUsers[]
  OmegaQuote  OmegaQuote[]
  memberships Membership[]

  @@map("users")
}

////////////
// Groups //
////////////

model Membership {
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  group      Group   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId    Int
  admin      Boolean
  active     Boolean
  startOrder Int
  endOrder   Int

  @@unique([userId, groupId])
}

// Currently prisma doesn't support table inheritance. What comes beneath is
// the best approximation we can make with the current system. This NEEDS
// to be refactored when/if prisma adds support for inheritance.

// To make things the 'Group' model contains a field indicating what type of
// group it is.
enum GroupType {
  CLASS
  COMMITEE
  INTEREST_GROUP
  OMEGA_MEMBERSHIP
  STUDY_PROGRAMME
}

// The model 'Group' should be treated as an abstract table. I.e. a generic
// 'Group' should never be created by itself. It should always be created
// with a reference to one specific type of group.
model Group {
  id                Int              @id @default(autoincrement())
  name              String
  memberships       Membership[]
  membershipRenewal Boolean
  roles             RolesGroups[]
  groupType         GroupType
  class             Class?
  commitee          Commitee?
  interestGroup     InterestGroup?
  omegaMembership   OmegaMembership?
  studyProgramme    StudyProgramme?
}

// Bellow are all the specific types of groups. These models should contain
// the specific information that only that type of group requires.

model Class {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int   @unique
  year    Int
}

model Commitee {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int   @unique
}

model InterestGroup {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int   @unique
}

enum OmegaMembershipLevel {
  SOELLE // Avsky!
  MEMBER
  EXTERNAL
}

model OmegaMembership {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int   @unique

}

model StudyProgramme {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int   @unique
  // TODO - Add study program model when finnished
}

enum Permission {
  // Omega Quotes
  OMEGAQUOTES_WRITE
  OMEGAQUOTES_READ

  // Her kommer masse eksempler på tillganger, for nå er de bare for testing

  // Fridge
  USE_MONEY
  USE_FRIDGE
  INFINITE_MONEY

  // Bulshit
  POST_BULSHIT
  VIEW_BULSHIT

  // Events
  PARTICIPATE_IN_EVENTS
  CREATE_EVENTS

  // Minecraft
  CREATIVE_MODE
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  users       RolesUsers[] // Will be removed when groups are finnished
  groups      RolesGroups[]
  permissions RolePermission[]

  @@map("role")
}

model RolePermission {
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int        @map("role_id")
  permission Permission

  @@unique([roleId, permission])
  @@map("role_permission")
}

// Will be removed when groups are finnished
model RolesUsers {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId Int

  @@id([userId, roleId])
}

model RolesGroups {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId Int
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId  Int

  @@unique([groupId, roleId])
}

model Image {
  id                   Int              @id @default(autoincrement())
  fsLocation           String           @unique
  fsLocationSmallSize  String?          @unique
  fsLocationMediumSize String?          @unique
  name                 String           @unique
  ext                  String
  alt                  String
  collection           ImageCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  coverImageFor        ImageCollection? @relation(name: "coverImage")
  collectionId         Int
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  cmsImages            CmsImage[]

  @@map("images")
}

model ImageCollection {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  images       Image[]
  coverImage   Image?   @relation(fields: [coverImageId], references: [id], name: "coverImage")
  coverImageId Int?     @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("image_collections")
}

enum ImageSize {
  SMALL
  MEDIUM
  LARGE
}

model CmsImage {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  image          Image?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId        Int?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  imageSize      ImageSize       @default(MEDIUM) @map("small_image")
  articleSection ArticleSection?
  Article        Article? //Can be cover image for an article

  @@map("cms_images")
}

model CmsParagraph {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  contentMd      String          @default("")
  contentHtml    String          @default("")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  articleSection ArticleSection?

  @@map("cms_paragraphs")
}

model CmsLink {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  url            String          @default("/")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  text           String          @default("Link")
  articleSection ArticleSection?

  @@map("cms_links")
}

enum Position {
  LEFT
  RIGHT
}

model ArticleSection {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  cmsImage       CmsImage?     @relation(fields: [cmsImageId], references: [id], onDelete: SetNull)
  cmsImageId     Int?          @unique
  cmsLink        CmsLink?      @relation(fields: [cmsLinkId], references: [id], onDelete: SetNull)
  cmsLinkId      Int?          @unique
  cmsParagraph   CmsParagraph? @relation(fields: [cmsParagraphId], references: [id], onDelete: SetNull)
  cmsParagraphId Int?          @unique
  imagePosition  Position      @default(RIGHT) @map("image_position")
  imageSize      Int           @default(200)
  article        Article?      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId      Int?
  order          Int           @default(autoincrement()) //The order "position" of the article section in the article

  //If true, the article section will be deleted if it is empty, ie has no relation to paragraph, link or image
  destroyOnEmpty Boolean @default(true) @map("distroy_on_empty")

  @@unique([articleId, order]) //There can only be one article section with a given order in an article
  @@map("article_sections")
}

model Article {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  articleSections ArticleSection[]
  coverImage      CmsImage         @relation(fields: [coverImageId], references: [id])
  coverImageId    Int              @unique

  @@map("articles")
}

model OmegaQuote {
  id           Int      @id @default(autoincrement())
  author       String
  quote        String
  timestamp    DateTime @default(now())
  userPoster   User     @relation(fields: [userPosterId], references: [id])
  userPosterId Int

  @@map("omega_quotes")
}
