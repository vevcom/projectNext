///////////
// SETUP //
///////////

generator projectnext {
  provider = "prisma-client-js"
}

generator prismaservice {
  provider = "prisma-client-js"
  output   = "./prismaservice/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

///////////
// USERS //
///////////

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  email      String       @unique
  password   String // Dette er kun for testing
  firstname  String       @default("[Fjernet]")
  lastname   String       @default("[Fjernet]")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  roles      RolesUsers[]
  OmegaQuote OmegaQuote[]
}

/////////////////
// PERMISSIONS //
/////////////////

enum Permission {
  // Omega Quotes
  OMEGAQUOTES_WRITE
  OMEGAQUOTES_READ

  // Her kommer masse eksempler på tillganger, for nå er de bare for testing

  // Fridge
  USE_MONEY
  USE_FRIDGE
  INFINITE_MONEY

  // Bulshit
  POST_BULSHIT
  VIEW_BULSHIT

  // Events
  PARTICIPATE_IN_EVENTS
  CREATE_EVENTS

  // Minecraft
  CREATIVE_MODE
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  users       RolesUsers[]
  permissions RolePermission[]
}

model RolePermission {
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     Int
  permission Permission

  @@unique([roleId, permission])
}

model RolesUsers {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

////////////
// Images //
////////////

model Image {
  id                   Int              @id @default(autoincrement())
  fsLocation           String           @unique
  fsLocationSmallSize  String?          @unique
  fsLocationMediumSize String?          @unique
  name                 String           @unique
  ext                  String
  alt                  String
  collection           ImageCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  coverImageFor        ImageCollection? @relation(name: "coverImage")
  collectionId         Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  cmsImages            CmsImage[]
}

model ImageCollection {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  images       Image[]
  coverImage   Image?   @relation(fields: [coverImageId], references: [id], name: "coverImage")
  coverImageId Int?     @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ImageSize {
  SMALL
  MEDIUM
  LARGE
}

/////////
// CMS //
/////////

model CmsImage {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  image          Image?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId        Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageSize      ImageSize       @default(MEDIUM)
  articleSection ArticleSection?
  Article        Article? //Can be cover image for an article
}

model CmsParagraph {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  contentMd      String          @default("")
  contentHtml    String          @default("")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  articleSection ArticleSection?
}

model CmsLink {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  url            String          @default("/")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  text           String          @default("Link")
  articleSection ArticleSection?
}

enum Position {
  LEFT
  RIGHT
}

model ArticleSection {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cmsImage       CmsImage?     @relation(fields: [cmsImageId], references: [id], onDelete: SetNull)
  cmsImageId     Int?          @unique
  cmsLink        CmsLink?      @relation(fields: [cmsLinkId], references: [id], onDelete: SetNull)
  cmsLinkId      Int?          @unique
  cmsParagraph   CmsParagraph? @relation(fields: [cmsParagraphId], references: [id], onDelete: SetNull)
  cmsParagraphId Int?          @unique
  imagePosition  Position      @default(RIGHT)
  imageSize      Int           @default(200)
  article        Article?      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId      Int?
  order          Int           @default(autoincrement()) //The order "position" of the article section in the article

  //If true, the article section will be deleted if it is empty, ie has no relation to paragraph, link or image
  destroyOnEmpty Boolean @default(true)

  @@unique([articleId, order]) //There can only be one article section with a given order in an article
}

model Article {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  articleSections ArticleSection[]
  coverImage      CmsImage         @relation(fields: [coverImageId], references: [id])
  coverImageId    Int              @unique
}

/////////////////
// OMEGAQUOTES //
/////////////////

model OmegaQuote {
  id           Int      @id @default(autoincrement())
  author       String
  quote        String
  timestamp    DateTime @default(now())
  userPoster   User     @relation(fields: [userPosterId], references: [id])
  userPosterId Int
}
