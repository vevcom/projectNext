generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

enum MembershipType {
  MEMBER
  SOELLE
  EXTERNAL
}

model User {
  id        Int          @id @default(autoincrement())
  username  String       @unique
  email     String       @unique
  password  String // Dette er kun for testing
  firstname String       @default("[Fjernet]")
  lastname  String       @default("[Fjernet]")
  roles     RolesUsers[]

  @@map("users")
}

enum Permission {
  // Her kommer masse eksempler på tillganger, for nå er de bare for testing

  // Fridge
  USE_MONEY
  USE_FRIDGE
  INFINITE_MONEY

  // Quotes
  USE_OMEGA_QUOTES

  // Bulshit
  POST_BULSHIT
  VIEW_BULSHIT

  // Events
  PARTICIPATE_IN_EVENTS
  CREATE_EVENTS

  // Minecraft
  CREATIVE_MODE
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users       RolesUsers[]
  permissions RolePermission[]
}

model RolePermission {
  role Role @relation(fields: [roleId], references: [id])
  roleId Int
  permission Permission

  @@unique([roleId, permission])
}

model RolesUsers {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Image {
  id            Int              @id @default(autoincrement())
  fsLocation    String           @unique @default(cuid())
  name          String           @unique
  ext           String
  alt           String
  collection    ImageCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  coverImageFor ImageCollection? @relation(name: "coverImage")
  collectionId  Int
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  ImageLink     ImageLink[]

  @@map("images")
}

model ImageLink {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     Image?   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("image_links")
}

model ImageCollection {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  images       Image[]
  coverImage   Image?   @relation(fields: [coverImageId], references: [id], name: "coverImage")
  coverImageId Int?     @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("image_collections")
}
