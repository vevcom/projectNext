///////////
// Setup //
///////////

generator projectnext {
  provider = "prisma-client-js"
}

generator prismaservice {
  provider = "prisma-client-js"
  output   = "./prismaservice/generated/pn"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

///////////
// Users //
///////////

enum SEX {
  FEMALE
  MALE
  OTHER
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  firstname     String        @default("[Fjernet]")
  lastname      String        @default("[Fjernet]")
  acceptedTerms DateTime?
  sex           SEX?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt // is also updated manually
  omegaQuote    OmegaQuote[]
  memberships   Membership[]
  credentials   Credentials?
  feideAccount  FeideAccount?

  // We need to explicitly mark the combination of 'id' and 'username' as
  // unique to make the relation to 'Credentials' work.
  @@unique([id, username])
}

model Credentials {
  user                 User     @relation(fields: [userId, username], references: [id, username], onDelete: Cascade, onUpdate: Cascade)
  userId               Int      @unique
  username             String   @unique
  passwordHash         String
  credentialsUpdatedAt DateTime @updatedAt

  // We need to explicitly mark the combination of 'userId' and 'username' as
  // unique to make the relation to 'User' work.
  @@unique([userId, username])
  @@map("Authentication")
}

model FeideAccount {
  id          String   @id
  accessToken String   @db.Text
  email       String   @unique
  expiresAt   DateTime
  issuedAt    DateTime
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

////////////
// Groups //
////////////

model Membership {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId    Int
  admin      Boolean
  title      String     @default("Medlem")
  omegaOrder OmegaOrder @relation(fields: [order], references: [order])
  order      Int

  @@unique([userId, groupId, order])
}

// Currently prisma doesn't support table inheritance. What comes beneath is
// the best approximation we can make with the current system. This NEEDS
// to be refactored when/if prisma adds support for inheritance.

// To make things the 'Group' model contains a field indicating what type of
// group it is.
enum GroupType {
  CLASS
  COMMITTEE
  INTEREST_GROUP
  MANUAL_GROUP
  OMEGA_MEMBERSHIP_GROUP
  STUDY_PROGRAMME
}

// The model 'Group' should be treated as an abstract table. I.e. a generic
// 'Group' should never be created by itself. It should always be created
// with a reference to one specific type of group.
model Group {
  id                Int           @id @default(autoincrement())
  groupType         GroupType
  membershipRenewal Boolean
  memberships       Membership[]
  roles             RolesGroups[]
  omegaOrder        OmegaOrder    @relation(fields: [order], references: [order])
  order             Int //The order the group is in currently.

  class                      Class?
  committee                  Committee?
  interestGroup              InterestGroup?
  manualGroup                ManualGroup?
  omegaMembershipGroup       OmegaMembershipGroup?
  studyProgramme             StudyProgramme?
  VisibilityRequirmenetGroup VisibilityRequirmenetGroup[]
}

// Bellow are all the specific types of groups. These models should contain
// the specific information that only that type of group requires.

model Class {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  year Int @unique
}

model Committee {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name        String
  shortName   String   @unique
  logoImage   CmsImage @relation(fields: [logoImageId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  logoImageId Int      @unique
}

model InterestGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name      String
  shortName String @unique
  // TODOD - add intereset group data
}

model ManualGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name      String
  shortName String @unique
}

enum OmegaMembershipLevel {
  SOELLE // Avsky!
  MEMBER
  EXTERNAL
}

model OmegaMembershipGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  omegaMembershipLevel OmegaMembershipLevel @unique
}

model StudyProgramme {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name          String
  code          String  @unique
  insititueCode String?
  yearsLength   Int?
  startYear     Int?
}

/////////////////
// Permissions //
/////////////////

enum Permission {
  // Omega Quotes
  OMEGAQUOTES_WRITE
  OMEGAQUOTES_READ

  // Ombul
  OMBUL_CREATE
  OMBUL_READ
  OMBUL_UPDATE
  OMBUL_DESTROY

  // Groups - Generic
  GROUP_READ
  GROUP_DESTROY
  GROUP_ADMIN //TODO: Temp needs discussion about this
  // Since groups can only be created with a specific type, there is no need to
  // have permissions to create or update a generic group.

  // omega order
  OMEGA_ORDER_READ
  OMEGA_ORDER_CREATE

  // Groups - Classes
  CLASS_CREATE
  CLASS_READ
  CLASS_UPDATE
  CLASS_DESTROY

  // Groups - Committess
  COMMITTEE_CREATE
  COMMITTEE_READ
  COMMITTEE_UPDATE
  COMMITTEE_DESTROY

  // Groups - InterestGroups
  INTEREST_GROUP_CREATE
  INTEREST_GROUP_READ
  INTEREST_GROUP_UPDATE
  INTEREST_GROUP_DESTROY

  // Groups - OmegaMembershipGroup
  OMEGA_MEMBERSHIP_GROUP_READ
  OMEGA_MEMBERSHIP_GROUP_UPDATE
  // Since omega membership groups always need to exist there are no
  // permissions to create or destroy them.

  // Groups - StudyProgramme
  STUDY_PROGRAMME_CREATE
  STUDY_PROGRAMME_READ
  STUDY_PROGRAMME_UPDATE
  STUDY_PROGRAMME_DESTROY

  // CMS permissions - it overrides the visibility of things
  CMS_ADMIN

  // User list permissions - theese are admin permissions, and do not have anything
  // to do with a userÂ´s ability to edit its own user.
  // USER_READ for example means that the user can read the list of users.
  USER_READ
  USER_UPDATE
  USER_DESTROY
  USER_CREATE

  IMAGE_COLLECTION_CREATE
  IMAGE_ADMIN

  EVENT_CREATE
  EVENT_ADMIN
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  groups      RolesGroups[]
  permissions RolePermission[]
}

model RolePermission {
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int
  permission Permission

  @@unique([roleId, permission])
}

model DefaultPermission {
  permission Permission @unique
}

model RolesGroups {
  group         Group   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId       Int
  role          Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId        Int
  forAdminsOnly Boolean

  @@unique([groupId, roleId])
}

////////////////
// Visibility //
////////////////
// The visibility system is used to determine what groups can see what content.

enum VisibilityPurpose {
  IMAGE
  EVENT
  ARTICLE_CATEGORY
  NEWS_ARTICLE
  SPECIAL
}

enum SpecialVisibilityPurpose {
  OMBUL
  COMMITTEE
  USER
  PUBLIC
}

model Visibility {
  id              Int                       @id @default(autoincrement())
  imageCollection ImageCollection?
  published       Boolean                   @default(false)
  purpose         VisibilityPurpose
  specialPurpose  SpecialVisibilityPurpose? @unique

  regularLevel   VisibilityLevel @relation(fields: [regularLevelId], references: [id], name: "regularLevel")
  regularLevelId Int             @unique
  adminLevel     VisibilityLevel @relation(fields: [adminLevelId], references: [id], name: "adminLevel")
  adminLevelId   Int             @unique
}

model VisibilityLevel {
  id                Int                     @id @default(autoincrement())
  permission        Permission? //Used if type of the Visibility is SPECIAL. (If null everybody will have access at this level)
  requirements      VisibilityRequirement[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  regularVisibility Visibility?             @relation(name: "regularLevel")
  adminVisibility   Visibility?             @relation(name: "adminLevel")
}

model VisibilityRequirement {
  id                          Int                          @id @default(autoincrement())
  visibility                  VisibilityLevel              @relation(fields: [visibilityId], references: [id], onDelete: Cascade)
  visibilityId                Int
  visibilityRequirmenetGroups VisibilityRequirmenetGroup[]
}

model VisibilityRequirmenetGroup {
  id                      Int                   @id @default(autoincrement())
  visibilityRequirmenet   VisibilityRequirement @relation(fields: [visibilityRequirmenetId], references: [id], onDelete: Cascade)
  visibilityRequirmenetId Int
  group                   Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId                 Int
}

////////////
// Images //
////////////

enum SpecialImage {
  DEFAULT_IMAGE
  DEFAULT_IMAGE_COLLECTION_COVER
  DEFAULT_PROFILE_IMAGE
  DAFAULT_COMMITTEE_LOGO
  LOGO_SIMPLE
  LOGO_WHITE
  LOGO_WHITE_TEXT
  MAGISK_HATT
}

model Image {
  id                      Int              @id @default(autoincrement())
  fsLocation              String           @unique
  fsLocationSmallSize     String?          @unique
  fsLocationMediumSize    String?          @unique
  name                    String           @unique
  ext                     String
  alt                     String
  collection              ImageCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  coverImageForCollection ImageCollection? @relation(name: "coverImageForCollection")
  collectionId            Int
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  cmsImages               CmsImage[]
  special                 SpecialImage?    @unique
}

enum SpecialCollection {
  STANDARDIMAGES
  OMBULCOVERS
  PROFILEIMAGES
  COMMITTEELOGOS
}

model ImageCollection {
  id           Int                @id @default(autoincrement())
  name         String             @unique
  description  String?
  images       Image[]
  coverImage   Image?             @relation(fields: [coverImageId], references: [id], name: "coverImageForCollection")
  coverImageId Int?               @unique
  special      SpecialCollection? @unique
  visibility   Visibility         @relation(fields: [visibilityId], references: [id])
  visibilityId Int                @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

enum ImageSize {
  SMALL
  MEDIUM
  LARGE
}

/////////
// CMS //
/////////

enum SpecialCmsImage {
  FRONTPAGE_LOGO
  FRONTPAGE_1
  FRONTPAGE_2
  FRONTPAGE_3
  FRONTPAGE_4
  SERVER_ERROR
  NOT_FOUND
  AUTH_ICON
  FOOTER_LOGO
  FOOTER_1
  FOOTER_2
  FOOTER_3
  LOADER_IMAGE
  MOBILE_NAV_LOGIN_BUTTON
  MOBILE_NAV_PRIMARY_BUTTON
  NAV_LOGIN_BUTTON
  NAV_PRIMARY_BUTTON
}

model CmsImage {
  id                   Int              @id @default(autoincrement())
  name                 String           @unique @default(cuid())
  image                Image?           @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId              Int?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  imageSize            ImageSize        @default(MEDIUM)
  articleSection       ArticleSection?  @relation(fields: [articleSectionId], references: [id], onDelete: Cascade)
  articleSectionId     Int?             @unique
  coverImageforArticle Article?
  Ombul                Ombul?
  committee            Committee?
  special              SpecialCmsImage? @unique
}

enum SpecialCmsParagraph {
  FRONTPAGE_1
  FRONTPAGE_2
  FRONTPAGE_3
  FRONTPAGE_4
}

model CmsParagraph {
  id               Int                  @id @default(autoincrement())
  name             String               @unique @default(cuid())
  contentMd        String               @default("")
  contentHtml      String               @default("")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  articleSection   ArticleSection?      @relation(fields: [articleSectionId], references: [id], onDelete: Cascade)
  articleSectionId Int?                 @unique
  special          SpecialCmsParagraph? @unique
}

model CmsLink {
  id               Int             @id @default(autoincrement())
  name             String          @unique @default(cuid())
  url              String          @default("/")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  text             String          @default("Link")
  articleSection   ArticleSection? @relation(fields: [articleSectionId], references: [id], onDelete: Cascade)
  articleSectionId Int?            @unique
}

enum Position {
  LEFT
  RIGHT
}

model ArticleSection {
  id        Int      @id @default(autoincrement())
  name      String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imagePosition Position @default(RIGHT)
  imageSize     Int      @default(200)
  article       Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     Int?
  order         Int      @default(autoincrement()) //The order "position" of the article section in the article

  //If true, the article section will be deleted if it is empty, ie has no relation to paragraph, link or image
  destroyOnEmpty Boolean       @default(true)
  cmsImage       CmsImage?
  cmsParagraph   CmsParagraph?
  cmsLink        CmsLink?

  @@unique([articleId, order]) //There can only be one article section with a given order in an article
}

model Article {
  id                  Int              @id @default(autoincrement())
  name                String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  articleSections     ArticleSection[]
  newsArticle         NewsArticle?
  articleCategory     ArticleCategory? @relation(fields: [articleCategoryId, articleCategoryName], references: [id, name], onDelete: Cascade)
  articleCategoryId   Int?
  articleCategoryName String?
  coverImage          CmsImage         @relation(fields: [coverImageId], references: [id], onDelete: Cascade)
  coverImageId        Int              @unique

  @@unique([name, id])
  @@unique([articleCategoryName, name])
}

model NewsArticle {
  id             Int        @id @default(autoincrement())
  description    String?
  endDateTime    DateTime //when the article is no longer considered current
  article        Article    @relation(fields: [articleId, articleName], references: [id, name], onDelete: Cascade) //This should always be set, but it is not required by schema (prisma limitation)
  articleId      Int        @unique
  articleName    String
  omegaOrder     OmegaOrder @relation(fields: [orderPublished], references: [order], onDelete: Restrict)
  orderPublished Int

  @@unique([articleId, articleName])
  @@unique([articleName, orderPublished])
}

model ArticleCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  articles    Article[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([id, name])
}

/////////////////
// OmegaQuotes //
/////////////////

model OmegaQuote {
  id           Int      @id @default(autoincrement())
  author       String
  quote        String
  timestamp    DateTime @default(now())
  userPoster   User     @relation(fields: [userPosterId], references: [id])
  userPosterId Int
}

////////////////////////////
// Current order of omega //
////////////////////////////

model OmegaOrder {
  order     Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  newsArticles NewsArticle[]
  membership   Membership[]
  Group        Group[]
}

///////////
// Ombul //
///////////

model Ombul {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  fsLocation   String   @unique //location in /store/ombul/[fsLocation]
  year         Int
  issueNumber  Int
  coverImage   CmsImage @relation(fields: [coverImageId], references: [id], onDelete: Cascade)
  coverImageId Int      @unique

  @@unique([year, name])
  @@unique([year, issueNumber])
}
