datasource db {
  provider = "postgresql"
  url      = env("VEVEN_DB_URI")
}

generator veven {
  provider = "prisma-client-js"
  output   = "../prismaservice/generated/veven"
}

model AliasAssociations {
  MailAliasId Int
  UserId      Int
  MailAliases MailAliases @relation(fields: [MailAliasId], references: [id], onDelete: SetNull)
  Users       Users       @relation(fields: [UserId], references: [id], onDelete: SetNull)

  @@id([MailAliasId, UserId])
}

model Articles {
  id                Int                      @id @default(autoincrement())
  title             String                   @db.VarChar(255)
  text              String?
  lead              String?
  timesRead         Int?                     @default(0)
  dateEnd           DateTime                 @db.Timestamptz(6)
  sticky            Boolean?                 @default(false)
  displayTo         enum_Articles_displayTo? @default(all)
  createdAt         DateTime                 @db.Timestamptz(6)
  updatedAt         DateTime                 @db.Timestamptz(6)
  ImageId           Int?
  AuthorUserId      Int?
  AuthorCommitteeId Int
  Committees        Committees               @relation(fields: [AuthorCommitteeId], references: [id], onDelete: NoAction)
  Images            Images?                  @relation(fields: [ImageId], references: [id])
}

model Bedreviteren {
  id             Int      @id @default(autoincrement())
  posterNickname String?  @db.VarChar(255)
  text           String?
  createdAt      DateTime @db.Timestamptz(6)
  updatedAt      DateTime @db.Timestamptz(6)
}

model Bullshit {
  id        Int       @id @default(autoincrement())
  text      String?
  timestamp DateTime? @db.Timestamptz(6)
  PosterId  Int?
  Users     Users?    @relation(fields: [PosterId], references: [id])
}

model Bulshits {
  id        Int      @id @default(autoincrement())
  bulshit   String
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  PosterId  Int?
  Users     Users?   @relation(fields: [PosterId], references: [id])
}

model CommitteeApplications {
  id                  Int                 @id @default(autoincrement())
  text                String?
  order               Int
  createdAt           DateTime            @db.Timestamptz(6)
  updatedAt           DateTime            @db.Timestamptz(6)
  GeneralId           Int
  CommitteeId         Int
  Committees          Committees          @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
  GeneralApplications GeneralApplications @relation(fields: [GeneralId], references: [id], onDelete: Cascade)

  @@unique([GeneralId, CommitteeId])
}

model CommitteeMembers {
  id          Int         @id @default(autoincrement())
  order       Int
  position    String?     @default("Komitèmedlem") @db.VarChar(255)
  admin       Boolean     @default(false)
  placement   Int         @default(99)
  createdAt   DateTime    @db.Timestamptz(6)
  updatedAt   DateTime    @db.Timestamptz(6)
  UserId      Int?
  CommitteeId Int?
  Committees  Committees? @relation(fields: [CommitteeId], references: [id], onDelete: Cascade)
  Users       Users?      @relation(fields: [UserId], references: [id])

  @@unique([UserId, CommitteeId])
}

model CommitteeMembersHist {
  id          Int        @id @default(autoincrement())
  order       Int
  position    String?    @default("Komitémedlem") @db.VarChar(255)
  admin       Boolean    @default(false)
  placement   Int        @default(99)
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  UserId      Int
  CommitteeId Int
  Committees  Committees @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
  Users       Users      @relation(fields: [UserId], references: [id], onDelete: NoAction)

  @@unique([order, UserId, CommitteeId])
}

model Committees {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  shortname             String                  @unique @db.VarChar(255)
  applicationLead       String?
  applicationVideo      String?                 @db.VarChar(255)
  applicationText       String?
  allowApplication      Boolean                 @default(true)
  active                Boolean                 @default(true)
  ImageId               Int?
  Articles              Articles[]
  CommitteeApplications CommitteeApplications[]
  CommitteeMembers      CommitteeMembers[]
  CommitteeMembersHist  CommitteeMembersHist[]
  Events                Events[]
  ImageGroups           ImageGroups[]
  InfoPageCategories    InfoPageCategories[]
  InfoPages             InfoPages[]
  LockerReservations    LockerReservations[]
  MailAliases           MailAliases[]
  MailTemplates         MailTemplates[]
  Polls                 Polls[]
  SimpleEvents          SimpleEvents[]
  SpecialRoles          SpecialRoles[]
  WhatsUp               WhatsUp[]
}

model Confirmations {
  uuid               String               @id @db.Uuid
  confirmed          Boolean              @default(false)
  type               String?              @db.VarChar(255)
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  EventRegistrations EventRegistrations[]
}

model EventRegistrations {
  id                                                               Int            @id @default(autoincrement())
  company                                                          Boolean        @default(false)
  manPaid                                                          Boolean        @default(false)
  note                                                             String?
  nameSpecified                                                    String?        @db.VarChar(255)
  emailSpecified                                                   String?        @db.VarChar(255)
  extraFieldChoices                                                Json?          @db.Json
  createdAt                                                        DateTime       @db.Timestamptz(6)
  updatedAt                                                        DateTime       @db.Timestamptz(6)
  ConfirmationUuid                                                 String?        @db.Uuid
  UserId                                                           Int?
  EventId                                                          Int?
  MainPaymentId                                                    Int?
  CompanyPaymentId                                                 Int?
  MoneyPayments_EventRegistrations_CompanyPaymentIdToMoneyPayments MoneyPayments? @relation("EventRegistrations_CompanyPaymentIdToMoneyPayments", fields: [CompanyPaymentId], references: [id])
  Confirmations                                                    Confirmations? @relation(fields: [ConfirmationUuid], references: [uuid])
  Events                                                           Events?        @relation(fields: [EventId], references: [id], onDelete: Cascade)
  MoneyPayments_EventRegistrations_MainPaymentIdToMoneyPayments    MoneyPayments? @relation("EventRegistrations_MainPaymentIdToMoneyPayments", fields: [MainPaymentId], references: [id])
  Users                                                            Users?         @relation(fields: [UserId], references: [id])

  @@unique([UserId, EventId])
}

model Events {
  id                   Int                  @id @default(autoincrement())
  title                String               @db.VarChar(255)
  location             String?              @db.VarChar(255)
  text                 String?
  lead                 String?
  places               Int?                 @default(0)
  waitingList          Boolean?             @default(true)
  eventDate            DateTime?            @db.Timestamptz(6)
  registrationStart    DateTime?            @db.Timestamptz(6)
  registrationDeadline DateTime?            @db.Timestamptz(6)
  paymentStart         DateTime?            @db.Timestamptz(6)
  paymentDeadline      DateTime?            @db.Timestamptz(6)
  allow                enum_Events_allow?   @default(everyone)
  allowProgramme       Json?                @db.Json
  company              Boolean              @default(false)
  extraFields          Json?                @db.Json
  allowYear            Json                 @db.Json
  regFinal             Boolean              @default(true)
  prikkEnabled         Boolean              @default(true)
  html                 Boolean?             @default(false)
  confirmationEnabled  Boolean?             @default(false)
  MainProductNum       Int?                 @unique
  CompanyProductNum    Int?                 @unique
  createdAt            DateTime             @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  HostCommitteeId      Int
  CreatedByUserId      Int?
  ImageId              Int?
  EventRegistrations   EventRegistrations[]
  Users                Users?               @relation(fields: [CreatedByUserId], references: [id])
  Committees           Committees           @relation(fields: [HostCommitteeId], references: [id], onDelete: NoAction)
  Images               Images?              @relation(fields: [ImageId], references: [id])
}

model ExtraAliasMembers {
  id          Int         @id @default(autoincrement())
  address     String      @db.VarChar(255)
  MailAliasId Int
  MailAliases MailAliases @relation(fields: [MailAliasId], references: [id], onDelete: NoAction)

  @@unique([address, MailAliasId])
}

model GeneralApplications {
  id                    Int                     @id @default(autoincrement())
  text                  String?
  createdAt             DateTime                @db.Timestamptz(6)
  updatedAt             DateTime                @db.Timestamptz(6)
  ApplicantId           Int?
  TimePeriodId          Int
  CommitteeApplications CommitteeApplications[]
  Users                 Users?                  @relation(fields: [ApplicantId], references: [id])
  TimePeriods           TimePeriods             @relation(fields: [TimePeriodId], references: [id], onDelete: Cascade)

  @@unique([ApplicantId, TimePeriodId])
}

model ImageGroups {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  createdAt   DateTime    @db.Timestamptz(6)
  updatedAt   DateTime    @db.Timestamptz(6)
  CommitteeId Int?
  Committees  Committees? @relation(fields: [CommitteeId], references: [id])
  Images      Images[]
}

model Images {
  id               Int                @id @default(autoincrement())
  name             String             @db.Uuid
  originalName     String             @db.VarChar(255)
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  ImageGroupId     Int?
  UserId           Int?
  Articles         Articles[]
  Events           Events[]
  ImageGroups      ImageGroups?       @relation(fields: [ImageGroupId], references: [id], onDelete: Cascade)
  InfoPages        InfoPages[]
  MoneyCommodities MoneyCommodities[]
  Ombul            Ombul[]
  Users            Users[]
}

model InfoPageCategories {
  id          Int                            @id @default(autoincrement())
  title       String                         @db.VarChar(255)
  allow       enum_InfoPageCategories_allow? @default(owner)
  showLinks   Boolean?                       @default(false)
  createdAt   DateTime                       @db.Timestamptz(6)
  updatedAt   DateTime                       @db.Timestamptz(6)
  CommitteeId Int
  Committees  Committees                     @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
  InfoPages   InfoPages[]
}

model InfoPages {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique @db.VarChar(255)
  displayName        String              @db.VarChar(255)
  text               String?
  html               Boolean?            @default(false)
  blank              Boolean?            @default(false)
  displaySidebar     Boolean?            @default(true)
  links              Json?               @db.Json
  active             Boolean?            @default(false)
  headline           String?             @db.VarChar(255)
  categoryOwner      Boolean?            @default(false)
  order              Int
  createdAt          DateTime            @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  InfoPageCategoryId Int?
  ImageId            Int?
  CommitteeId        Int
  Committees         Committees          @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
  Images             Images?             @relation(fields: [ImageId], references: [id])
  InfoPageCategories InfoPageCategories? @relation(fields: [InfoPageCategoryId], references: [id])
}

model LockerReservations {
  id           Int         @id @default(autoincrement())
  reservedDate DateTime?   @db.Timestamptz(6)
  CommitteeId  Int?
  LockerId     Int?
  UserId       Int?
  Committees   Committees? @relation(fields: [CommitteeId], references: [id])
  Lockers      Lockers?    @relation(fields: [LockerId], references: [id], onDelete: Cascade)
  Users        Users?      @relation(fields: [UserId], references: [id])
}

model Lockers {
  id                 Int                  @id @default(autoincrement())
  number             Int                  @unique
  floor              String               @db.VarChar(255)
  building           String               @db.VarChar(255)
  comment            String?              @db.VarChar(255)
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  LockerReservations LockerReservations[]
}

model MailAliases {
  id                Int                     @id @default(autoincrement())
  name              String                  @db.VarChar(255)
  address           String                  @unique @db.VarChar(255)
  allow             enum_MailAliases_allow? @default(none)
  auto              enum_MailAliases_auto?  @default(none)
  info              String?
  createdAt         DateTime                @db.Timestamptz(6)
  updatedAt         DateTime                @db.Timestamptz(6)
  CommitteeId       Int
  AliasAssociations AliasAssociations[]
  ExtraAliasMembers ExtraAliasMembers[]
  Committees        Committees              @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
  MailReservations  MailReservations[]
}

model MailReservations {
  MailAliasId Int
  UserId      Int
  MailAliases MailAliases @relation(fields: [MailAliasId], references: [id], onDelete: Cascade)
  Users       Users       @relation(fields: [UserId], references: [id], onDelete: Cascade)

  @@id([MailAliasId, UserId])
}

model MailTemplates {
  id            Int        @id @default(autoincrement())
  name          String     @unique @db.VarChar(255)
  htmlBody      String?
  plainTextBody String?
  createdAt     DateTime   @db.Timestamptz(6)
  updatedAt     DateTime   @db.Timestamptz(6)
  CommitteeId   Int
  Committees    Committees @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
}

model MoneyCommodities {
  id                  Int                        @id @default(autoincrement())
  description         String                     @default("No description") @db.VarChar(255)
  price               Int                        @default(0)
  isAvailable         Boolean                    @default(true)
  allowDirect         Boolean                    @default(false)
  purchaseLimit       Int                        @default(0)
  type                enum_MoneyCommodities_type
  fridgeKey           String?                    @db.VarChar(255)
  allowConfirm        Boolean                    @default(false)
  productNumber       Int
  statementDescriptor String?                    @db.VarChar(255)
  createdAt           DateTime                   @db.Timestamptz(6)
  updatedAt           DateTime                   @db.Timestamptz(6)
  MoneyDrainAccountId Int
  ImageId             Int?
  Images              Images?                    @relation(fields: [ImageId], references: [id])
  MoneyDrainAccounts  MoneyDrainAccounts         @relation(fields: [MoneyDrainAccountId], references: [id], onDelete: NoAction)
  MoneyPayments       MoneyPayments[]

  @@index([productNumber], map: "product_num_index")
}

model MoneyDrainAccounts {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  accountNumber    String?            @db.VarChar(255)
  active           Boolean            @default(true)
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  SpecialRoleId    Int?
  MoneyCommodities MoneyCommodities[]
  SpecialRoles     SpecialRoles?      @relation(fields: [SpecialRoleId], references: [id])
  MoneyTransfers   MoneyTransfers[]
}

model MoneyManualDeposits {
  id                   Int                 @id @default(autoincrement())
  fees                 Int?                @default(0)
  amount               Int
  createdAt            DateTime            @db.Timestamptz(6)
  updatedAt            DateTime            @db.Timestamptz(6)
  UserId               Int?
  MoneySourceAccountId Int
  MoneySourceAccounts  MoneySourceAccounts @relation(fields: [MoneySourceAccountId], references: [id], onDelete: NoAction)
  Users                Users?              @relation(fields: [UserId], references: [id])
}

model MoneyPaymentConfirmations {
  id               Int           @id @default(autoincrement())
  confirmed        Boolean       @default(false)
  confirmationUUID String        @db.Uuid
  createdAt        DateTime      @db.Timestamptz(6)
  updatedAt        DateTime      @db.Timestamptz(6)
  MoneyPaymentId   Int
  UserId           Int?
  MoneyPayments    MoneyPayments @relation(fields: [MoneyPaymentId], references: [id], onDelete: Cascade)
  Users            Users?        @relation(fields: [UserId], references: [id])
}

model MoneyPayments {
  id                                                                    Int                         @id @default(autoincrement())
  repaidFees                                                            Int                         @default(0)
  createdAt                                                             DateTime                    @db.Timestamptz(6)
  updatedAt                                                             DateTime                    @db.Timestamptz(6)
  MoneyCommodityId                                                      Int?
  MoneySourceAccountId                                                  Int
  EventRegistrations_EventRegistrations_CompanyPaymentIdToMoneyPayments EventRegistrations[]        @relation("EventRegistrations_CompanyPaymentIdToMoneyPayments")
  EventRegistrations_EventRegistrations_MainPaymentIdToMoneyPayments    EventRegistrations[]        @relation("EventRegistrations_MainPaymentIdToMoneyPayments")
  MoneyPaymentConfirmations                                             MoneyPaymentConfirmations[]
  MoneyCommodities                                                      MoneyCommodities?           @relation(fields: [MoneyCommodityId], references: [id])
  MoneySourceAccounts                                                   MoneySourceAccounts         @relation(fields: [MoneySourceAccountId], references: [id], onDelete: NoAction)
}

model MoneySourceAccounts {
  id                    Int                   @id @default(autoincrement())
  stripeCustomerId      String?               @db.VarChar(255)
  stripePaymentMethodId String?               @db.VarChar(255)
  stripeCardDescription String?               @db.VarChar(255)
  NTNUCard              String?               @db.VarChar(255)
  disabled              Boolean?              @default(false)
  createdAt             DateTime              @db.Timestamptz(6)
  updatedAt             DateTime              @db.Timestamptz(6)
  UserId                Int                   @unique
  MoneyManualDeposits   MoneyManualDeposits[]
  MoneyPayments         MoneyPayments[]
  Users                 Users                 @relation(fields: [UserId], references: [id], onDelete: NoAction)
  MoneyStripeDeposits   MoneyStripeDeposits[]
}

model MoneyStripeDeposits {
  id                   Int                             @id @default(autoincrement())
  amount               Int
  fees                 Int?
  status               enum_MoneyStripeDeposits_status
  stripeChargeId       String?                         @db.VarChar(255)
  stripeIntentId       String?                         @db.VarChar(255)
  err                  String?                         @db.VarChar(255)
  createdAt            DateTime                        @db.Timestamptz(6)
  updatedAt            DateTime                        @db.Timestamptz(6)
  MoneySourceAccountId Int?
  MoneySourceAccounts  MoneySourceAccounts?            @relation(fields: [MoneySourceAccountId], references: [id])
}

model MoneyTransfers {
  id                  Int                 @id @default(autoincrement())
  amount              Int
  createdAt           DateTime            @db.Timestamptz(6)
  updatedAt           DateTime            @db.Timestamptz(6)
  MoneyDrainAccountId Int?
  MoneyDrainAccounts  MoneyDrainAccounts? @relation(fields: [MoneyDrainAccountId], references: [id])
}

model Ombul {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  lead         String?
  year         Int?
  number       Int
  fileName     String   @db.Uuid
  originalName String   @db.VarChar(255)
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)
  ImageId      Int?
  Images       Images?  @relation(fields: [ImageId], references: [id])
}

model Permissions {
  id             Int     @id @default(autoincrement())
  name           String  @unique @db.VarChar(255)
  soelle         Boolean @default(false)
  member         Boolean @default(false)
  committee      Boolean @default(false)
  committeeadmin Boolean @default(false)
  vevcom         Boolean @default(false)
  hovedstyret    Boolean @default(false)
  ombul          Boolean @default(false)
  contactor      Boolean @default(false)
  siving         Boolean @default(false)
  role           Boolean @default(false)
}

model PollChoices {
  id        Int         @id @default(autoincrement())
  answer    String
  PollId    Int
  Polls     Polls       @relation(fields: [PollId], references: [id], onDelete: NoAction)
  PollVotes PollVotes[]
}

model PollVotes {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @db.Timestamptz(6)
  updatedAt    DateTime    @db.Timestamptz(6)
  PollChoiceId Int
  UserId       Int
  PollChoices  PollChoices @relation(fields: [PollChoiceId], references: [id], onDelete: Cascade)
  Users        Users       @relation(fields: [UserId], references: [id], onDelete: NoAction)

  @@unique([PollChoiceId, UserId])
}

model Polls {
  id          Int              @id @default(autoincrement())
  question    String
  deadline    DateTime         @default(dbgenerated("'2022-10-17 19:43:15.587+02'::timestamp with time zone")) @db.Timestamptz(6)
  anonymous   Boolean          @default(false)
  allow       enum_Polls_allow @default(everyone)
  createdAt   DateTime         @db.Timestamptz(6)
  updatedAt   DateTime         @db.Timestamptz(6)
  CommitteeId Int
  PollChoices PollChoices[]
  Committees  Committees       @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
}

model Prikks {
  id                            Int      @id @default(autoincrement())
  reason                        String
  prikkValue                    Int      @default(1)
  createdAt                     DateTime @db.Timestamptz(6)
  updatedAt                     DateTime @db.Timestamptz(6)
  AccusedId                     Int
  AccuserId                     Int?
  Users_Prikks_AccusedIdToUsers Users    @relation("Prikks_AccusedIdToUsers", fields: [AccusedId], references: [id], onDelete: Cascade)
  Users_Prikks_AccuserIdToUsers Users?   @relation("Prikks_AccuserIdToUsers", fields: [AccuserId], references: [id])
}

model Quotes {
  id        Int       @id @default(autoincrement())
  author    String
  quote     String
  timestamp DateTime? @db.Timestamptz(6)
  PosterId  Int?
  Users     Users?    @relation(fields: [PosterId], references: [id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model SequelizeMeta {
  name String? @db.VarChar(255)

  @@ignore
}

model Session {
  sid       String    @id @db.VarChar(36)
  expires   DateTime? @db.Timestamptz(6)
  data      String?
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
}

model Sessions {
  sid       String    @id @db.VarChar(36)
  expires   DateTime? @db.Timestamptz(6)
  data      String?
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
}

model SimpleEvents {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  text        String?
  eventDate   DateTime?  @db.Timestamptz(6)
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  CommitteeId Int
  Committees  Committees @relation(fields: [CommitteeId], references: [id], onDelete: NoAction)
}

model SpecialRoleMembers {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @db.Timestamptz(6)
  updatedAt     DateTime     @db.Timestamptz(6)
  SpecialRoleId Int
  UserId        Int?
  SpecialRoles  SpecialRoles @relation(fields: [SpecialRoleId], references: [id], onDelete: Cascade)
  Users         Users?       @relation(fields: [UserId], references: [id], onDelete: Cascade)

  @@unique([SpecialRoleId, UserId])
}

model SpecialRoles {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(255)
  unique             Boolean              @default(false)
  CommitteeId        Int?
  MoneyDrainAccounts MoneyDrainAccounts[]
  SpecialRoleMembers SpecialRoleMembers[]
  Committees         Committees?          @relation(fields: [CommitteeId], references: [id])
}

model StudyProgrammes {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  code          String        @unique @db.VarChar(255)
  years         Int           @default(5)
  instituteCode String?       @db.VarChar(255)
  history       Boolean?      @default(false)
  UserImports   UserImports[]
  Users         Users[]
}

model TimePeriods {
  id                  Int                   @id @default(autoincrement())
  key                 String                @db.VarChar(255)
  startDate           DateTime              @db.Timestamptz(6)
  endDate             DateTime              @db.Timestamptz(6)
  GeneralApplications GeneralApplications[]
}

model UserImportConflicts {
  type         enum_UserImportConflicts_type
  UserImportId Int
  UserId       Int
  Users        Users                         @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserImports  UserImports                   @relation(fields: [UserImportId], references: [id], onDelete: Cascade)

  @@id([UserImportId, UserId])
}

model UserImports {
  id                  Int                   @id @default(autoincrement())
  firstname           String                @db.VarChar(255)
  lastname            String                @db.VarChar(255)
  username            String                @unique @db.VarChar(255)
  order               Int
  yearOfStudy         Int
  createdAt           DateTime              @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  StudyProgrammeId    Int?
  UserImportConflicts UserImportConflicts[]
  StudyProgrammes     StudyProgrammes?      @relation(fields: [StudyProgrammeId], references: [id])
}

model Users {
  id                             Int                         @id @default(autoincrement())
  username                       String                      @db.VarChar(255)
  passwordHash                   String?                     @db.VarChar(255)
  passwordUsesMd5                Boolean?
  resetKey                       String?                     @unique @db.VarChar(255)
  firstname                      String                      @db.VarChar(255)
  lastname                       String                      @db.VarChar(255)
  email                          String?                     @db.VarChar(255)
  sex                            enum_Users_sex              @default(m)
  soelle                         Boolean                     @default(true)
  order                          Int
  yearOfStudy                    Int
  archived                       Boolean                     @default(false)
  reservation                    enum_Users_reservation      @default(none)
  bio                            String?
  flair                          Int                         @default(0)
  createdAt                      DateTime                    @db.Timestamptz(6)
  updatedAt                      DateTime                    @db.Timestamptz(6)
  StudyProgrammeId               Int?
  ImageId                        Int?
  AliasAssociations              AliasAssociations[]
  Bullshit                       Bullshit[]
  Bulshits                       Bulshits[]
  CommitteeMembers               CommitteeMembers[]
  CommitteeMembersHist           CommitteeMembersHist[]
  EventRegistrations             EventRegistrations[]
  Events                         Events[]
  GeneralApplications            GeneralApplications[]
  LockerReservations             LockerReservations[]
  MailReservations               MailReservations[]
  MoneyManualDeposits            MoneyManualDeposits[]
  MoneyPaymentConfirmations      MoneyPaymentConfirmations[]
  MoneySourceAccounts            MoneySourceAccounts?
  PollVotes                      PollVotes[]
  Prikks_Prikks_AccusedIdToUsers Prikks[]                    @relation("Prikks_AccusedIdToUsers")
  Prikks_Prikks_AccuserIdToUsers Prikks[]                    @relation("Prikks_AccuserIdToUsers")
  Quotes                         Quotes[]
  SpecialRoleMembers             SpecialRoleMembers[]
  UserImportConflicts            UserImportConflicts[]
  Images                         Images?                     @relation(fields: [ImageId], references: [id])
  StudyProgrammes                StudyProgrammes?            @relation(fields: [StudyProgrammeId], references: [id])

  @@unique([username, order])
}

model WhatsUp {
  id                Int         @id @default(autoincrement())
  startDate         DateTime?   @db.Timestamptz(6)
  endDate           DateTime?   @db.Timestamptz(6)
  countdown         Boolean?
  title             String?     @db.VarChar(255)
  description       String?
  createdAt         DateTime    @db.Timestamptz(6)
  updatedAt         DateTime    @db.Timestamptz(6)
  PosterCommitteeId Int?
  Committees        Committees? @relation(fields: [PosterCommitteeId], references: [id])
}

enum enum_Articles_displayTo {
  all
  user
  com
}

enum enum_Events_allow {
  everyone
  committees
  allcommittees
  not_dgr
  members
}

enum enum_Events_prikkPunishment {
  none
  delay
  ban
  both
}

enum enum_InfoPageCategories_allow {
  owner
  all
}

enum enum_MailAliases_allow {
  everyone
  committees
  committee
  none
}

enum enum_MailAliases_auto {
  admins
  members
  allmembers
  none
}

enum enum_MoneyCommodities_type {
  event
  fridge
  other
}

enum enum_MoneyStripeDeposit_status {
  processing
  successful
  failed
}

enum enum_MoneyStripeDeposits_status {
  processing
  successful
  failed
  authorizing
}

enum enum_Polls_allow {
  everyone
  members
  committees
}

enum enum_UserImportConflicts_type {
  errnm
  erryr
  std
  fatal
}

enum enum_Users_reservation {
  none
  mass
  all
}

enum enum_Users_sex {
  m
  f
  other
}
