enum SEX {
  FEMALE
  MALE
  OTHER
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  firstname     String    @default("[Fjernet]")
  lastname      String    @default("[Fjernet]")
  bio           String    @default("")
  archived      Boolean   @default(false)
  acceptedTerms DateTime?
  sex           SEX?
  allergies     String?
  mobile        String?
  emailVerified DateTime?
  image         Image?    @relation(fields: [imageId], references: [id]) // TODO: Rename to "profilePicture"?
  imageId       Int?
  studentCard   String?   @unique
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt // is also updated manually

  // Authentication info used for logging in.
  credentials  Credentials?
  feideAccount FeideAccount?

  // Memberships to groups (committees, interest groups, classes, etc...).
  memberships Membership[]

  // Lockers used by the user.
  LockerReservation LockerReservation[]

  // Omega quotes posted by the user.
  omegaQuote        OmegaQuote[]

  // Which ledger account (i.e. internal bank account) and
  // stripe customer this user is associated with.
  ledgerAccount  LedgerAccount?
  stripeCustomer StripeCustomer?

  // What notifications the user whiches to received and
  // which mailing lists the user is on.
  notificationSubscriptions NotificationSubscription[]
  mailingLists              MailingListUser[]

  // Which admissions (a.k.a. "opptak") the user has taken
  // and which admissions thay have registered for others.
  admissionTrials          AdmissionTrial[] @relation(name: "user")
  registeredAdmissionTrial AdmissionTrial[] @relation(name: "registeredBy")

  // The user's applications to committees.
  Application Application[]

  // Which events the user has registered for
  // and which events they have created.
  EventRegistration EventRegistration[]
  Event             Event[]

  // Which dots (a.k.a. "prikker") the user has received and given.
  dots        DotWrapper[] @relation(name: "dot_user")
  dotsAccused DotWrapper[] @relation(name: "dot_accuser")

  // The queue used to determine who is registering cards at Kiogeskabet.
  registerStudentCardQueue RegisterStudentCardQueue[]

  // Which cabin bookings the user has made.
  cabinBooking Booking[] @relation()

  // We need to explicitly mark the combination of 'id', 'username' and 'email' as
  // unique to make the relation to 'Credentials' work.
  @@unique([id, username, email])
}

// This model primaraly exists to keep the password hash separate from the user table.
// This is to reduce the risk of leaking the password hashes..
model Credentials {
  user                 User     @relation(fields: [userId, username, email], references: [id, username, email], onDelete: Cascade, onUpdate: Cascade)
  userId               Int      @unique
  username             String   @unique
  email                String   @unique
  passwordHash         String
  credentialsUpdatedAt DateTime @updatedAt

  // We need to explicitly mark the combination of 'userId', 'username' and 'email' as
  // unique to make the relation to 'User' work.
  @@unique([userId, username, email])
}

// Associates each user with their Feide account.
model FeideAccount {
  id          String   @id
  accessToken String   @db.Text
  email       String   @unique
  expiresAt   DateTime
  issuedAt    DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int      @unique
}

// Associates each user with their Stripe customer id.
model StripeCustomer {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @id
  customerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// When a user wants to register their student card, they are put in this queue.
// Then they must scan their card with the card reader at Kiogeskabet.
model RegisterStudentCardQueue {
  userId Int      @id
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiry DateTime
}

// TODO: Someone should add a comment for ContactDetails because I have noe idea what it is for. Is it for anonymous users?
model ContactDetails {
  id     Int     @id @default(autoincrement())
  name   String
  email  String?
  mobile String?

  EventRegistration EventRegistration[]
}
