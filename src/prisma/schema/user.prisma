enum SEX {
  FEMALE
  MALE
  OTHER
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  email             String              @unique
  firstname         String              @default("[Fjernet]")
  lastname          String              @default("[Fjernet]")
  bio               String              @default("")
  archived          Boolean             @default(false)
  acceptedTerms     DateTime?
  sex               SEX?
  allergies         String?
  mobile            String?
  emailVerified     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt // is also updated manually
  image             Image?              @relation(fields: [imageId], references: [id])
  imageId           Int?
  studentCard       String?             @unique
  LockerReservation LockerReservation[]
  omegaQuote        OmegaQuote[]
  memberships       Membership[]
  credentials       Credentials?
  feideAccount      FeideAccount?
  imageConsent      Boolean             @default(false)
  kioleskapLead     Boolean             @default(false)

  notificationSubscriptions NotificationSubscription[]
  mailingLists              MailingListUser[]
  admissionTrials           AdmissionTrial[]           @relation(name: "user")
  registeredAdmissionTrial  AdmissionTrial[]           @relation(name: "registeredBy")
  Application               Application[]
  EventRegistration         EventRegistration[]

  dots                     DotWrapper[]               @relation(name: "dot_user")
  dotsAccused              DotWrapper[]               @relation(name: "dot_accuser")
  registerStudentCardQueue RegisterStudentCardQueue[]
  Event                    Event[]

  cabinBooking Booking[] @relation()
  OmbulComment             OmbulComment[]

  // We need to explicitly mark the combination of 'id', 'username' and 'email' as
  // unique to make the relation to 'Credentials' work.
  @@unique([id, username, email])
}

model Credentials {
  user                 User     @relation(fields: [userId, username, email], references: [id, username, email], onDelete: Cascade, onUpdate: Cascade)
  userId               Int      @unique
  username             String   @unique
  email                String   @unique
  passwordHash         String
  credentialsUpdatedAt DateTime @updatedAt

  // We need to explicitly mark the combination of 'userId', 'username' and 'email' as
  // unique to make the relation to 'User' work.
  @@unique([userId, username, email])
}

model FeideAccount {
  id          String   @id
  accessToken String   @db.Text
  email       String   @unique
  expiresAt   DateTime
  issuedAt    DateTime
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RegisterStudentCardQueue {
  userId Int      @id
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiry DateTime
}

model ContactDetails {
  id     Int     @id @default(autoincrement())
  name   String
  email  String?
  mobile String?

  EventRegistration EventRegistration[]
}
