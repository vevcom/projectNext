model Membership {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId    Int
  admin      Boolean
  active     Boolean
  title      String     @default("Medlem")
  omegaOrder OmegaOrder @relation(fields: [order], references: [order])
  order      Int

  @@unique([userId, groupId, order])
}

// Currently prisma doesn't support table inheritance. What comes beneath is
// the best approximation we can make with the current system. This NEEDS
// to be refactored when/if prisma adds support for inheritance.

// To make things the 'Group' model contains a field indicating what type of
// group it is.
enum GroupType {
  CLASS
  COMMITTEE
  INTEREST_GROUP
  MANUAL_GROUP
  OMEGA_MEMBERSHIP_GROUP
  STUDY_PROGRAMME
}

// The model 'Group' should be treated as an abstract table. I.e. a generic
// 'Group' should never be created by itself. It should always be created
// with a reference to one specific type of group.
model Group {
  id          Int           @id @default(autoincrement())
  groupType   GroupType
  memberships Membership[]
  roles       RolesGroups[]
  omegaOrder  OmegaOrder    @relation(fields: [order], references: [order])
  order       Int //The order the group is in currently.

  class                Class?
  committee            Committee?
  interestGroup        InterestGroup?
  manualGroup          ManualGroup?
  omegaMembershipGroup OmegaMembershipGroup?
  studyProgramme       StudyProgramme?
  LockerReservation    LockerReservation[]
  mailingLists         MailingListGroup[]

  VisibilityRequirmenetGroup VisibilityRequirmenetGroup[]
}

// Bellow are all the specific types of groups. These models should contain
// the specific information that only that type of group requires.

model Class {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  year Int @unique
}

model Committee {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  committeeArticle   Article  @relation(fields: [committeeArticleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  committeeArticleId Int      @unique
  name               String
  shortName          String   @unique
  logoImage          CmsImage @relation(fields: [logoImageId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  logoImageId        Int      @unique

  participationsInApplicationPeriods CommitteeParticipationInApplicationPeriod[]

  paragraph   CmsParagraph @relation(fields: [paragraphId], references: [id])
  paragraphId Int          @unique
  events      Event[]
}

model InterestGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name      String
  shortName String @unique

  articleSection   ArticleSection @relation(fields: [articleSectionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  articleSectionId Int            @unique
  // TODO - add intereset group data
}

model ManualGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name      String
  shortName String @unique
}

enum OmegaMembershipLevel {
  SOELLE // Avsky!
  MEMBER
  EXTERNAL
}

model OmegaMembershipGroup {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  omegaMembershipLevel OmegaMembershipLevel @unique
}

model StudyProgramme {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique
  id      Int   @id @default(autoincrement())

  name               String
  code               String               @unique
  insititueCode      String?
  yearsLength        Int?
  startYear          Int?
  partOfOmega        Boolean              @default(false)
  CourseStudyProgram CourseStudyProgram[]
}
