model ReleasePeriod {
  id           Int      @id @default(autoincrement())
  releaseTime  DateTime
  releaseUntil DateTime @db.Date
}

model PricePeriod {
  id                Int                 @id @default(autoincrement())
  validFrom         DateTime            @db.Date
  CabinProductPrice CabinProductPrice[]
}

model CabinProductPrice {
  id             Int          @id @default(autoincrement())
  description    String
  product        CabinProduct @relation(fields: [cabinProductId], references: [id])
  cabinProductId Int
  price          Int
  cronInterval   String       @default("* * *")
  memberShare    Int
  PricePeriod    PricePeriod  @relation(fields: [pricePeriodId], references: [id], onDelete: Cascade)
  pricePeriodId  Int
}

model CabinProduct {
  id                Int                 @id @default(autoincrement())
  name              String
  type              BookingType
  amount            Int
  CabinProductPrice CabinProductPrice[]
  BookingProduct    BookingProduct[]
}

model BookingProduct {
  booking        Booking      @relation(fields: [bookingId], references: [id])
  bookingId      Int
  product        CabinProduct @relation(fields: [cabinProductId], references: [id])
  cabinProductId Int
  quantity       Int // This is the quantity for each night, not the total

  @@unique([bookingId, cabinProductId])
}

enum BookingType {
  CABIN
  BED
  EVENT // To prevent the cabin to be bookable for a period
}

model Booking {
  id                 Int              @id @default(autoincrement())
  type               BookingType
  start              DateTime         @db.Date // Inclusive (counting nights after)
  end                DateTime         @db.Date // Exclusive
  user               User?            @relation(fields: [userId], references: [id])
  userId             Int?
  numberOfMembers    Int
  numberOfNonMembers Int
  notes              String?
  tenantNotes        String           @default("")
  // transaction Transaction
  transactionTimeout DateTime? // When the booking is deleted, due to no payment
  canceled           DateTime?
  event              Event?           @relation(fields: [eventId], references: [id])
  eventId            Int?
  BookingProduct     BookingProduct[]
}
