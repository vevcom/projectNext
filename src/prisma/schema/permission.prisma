enum Permission {
  // Job ads
  JOBAD_CREATE
  JOBAD_READ
  JOBAD_UPDATE
  JOBAD_DESTROY

  // Omega Quotes
  OMEGAQUOTES_WRITE
  OMEGAQUOTES_READ

  // Ombul
  OMBUL_CREATE
  OMBUL_READ
  OMBUL_UPDATE
  OMBUL_DESTROY

  // Groups - Generic
  GROUP_READ
  GROUP_DESTROY
  // Since groups can only be created with a specific type, there is no need to
  // have permissions to create or update a generic group.

  // Groups - Classes
  CLASS_CREATE
  CLASS_READ
  CLASS_UPDATE
  CLASS_DESTROY

  // Groups - Committess
  COMMITTEE_CREATE
  COMMITTEE_READ
  COMMITTEE_UPDATE
  COMMITTEE_DESTROY

  // Groups - InterestGroups
  INTEREST_GROUP_CREATE
  INTEREST_GROUP_READ
  INTEREST_GROUP_UPDATE
  INTEREST_GROUP_DESTROY

  // Groups - OmegaMembershipGroup
  OMEGA_MEMBERSHIP_GROUP_READ
  OMEGA_MEMBERSHIP_GROUP_UPDATE
  // Since omega membership groups always need to exist there are no
  // permissions to create or destroy them.

  // Groups - StudyProgramme
  STUDY_PROGRAMME_CREATE
  STUDY_PROGRAMME_READ
  STUDY_PROGRAMME_UPDATE
  STUDY_PROGRAMME_DESTROY

  // Notifications
  NOTIFICATION_CHANNEL_CREATE
  NOTIFICATION_CHANNEL_READ
  NOTIFICATION_CHANNEL_UPDATE

  NOTIFICATION_SUBSCRIPTION_READ
  NOTIFICATION_SUBSCRIPTION_READ_OTHER
  NOTIFICATION_SUBSCRIPTION_UPDATE
  NOTIFICATION_SUBSCRIPTION_UPDATE_OTHER

  NOTIFICATION_CREATE

  // Mail
  MAIL_SEND

  // Mail Aliases
  MAILALIAS_CREATE
  MAILALIAS_READ
  MAILALIAS_UPDATE
  MAILALIAS_DESTORY

  // Mailing list
  MAILINGLIST_CREATE
  MAILINGLIST_READ
  MAILINGLIST_UPDATE
  MAILINGLIST_DESTROY

  // Mailing list relations
  MAILINGLIST_ALIAS_CREATE
  MAILINGLIST_ALIAS_DESTROY
  MAILINGLIST_GROUP_CREATE
  MAILINGLIST_GROUP_DESTROY
  MAILINGLIST_USER_CREATE
  MAILINGLIST_USER_DESTROY
  MAILINGLIST_EXTERNAL_ADDRESS_CREATE
  MAILINGLIST_EXTERNAL_ADDRESS_DESTROY

  // External mail addresses
  MAILADDRESS_EXTERNAL_CREATE
  MAILADDRESS_EXTERNAL_READ
  MAILADDRESS_EXTERNAL_UPDATE
  MAILADDRESS_EXTERNAL_DESTROY

  // Admisstion
  ADMISSION_TRIAL_CREATE
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  groups      RolesGroups[]
  permissions RolePermission[]
}

model RolePermission {
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int
  permission Permission

  @@unique([roleId, permission])
}

model DefaultPermission {
  permission Permission @unique
}

model RolesGroups {
  group         Group   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId       Int
  role          Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId        Int
  forAdminsOnly Boolean

  @@unique([groupId, roleId])
}