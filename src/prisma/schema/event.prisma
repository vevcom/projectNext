enum EventCanView {
  CAN_REGISTER
  ALL
}

model Event {
  id             Int             @id @default(autoincrement())
  name           String
  omegaOrder     OmegaOrder      @relation(fields: [order], references: [order])
  order          Int
  paragraph      CmsParagraph    @relation(fields: [cmsParagraphId], references: [id])
  cmsParagraphId Int             @unique
  coverImage     CmsImage        @relation(fields: [coverImageId], references: [id])
  coverImageId   Int
  eventTagEvents EventTagEvent[]
  location       String?

  eventStart         DateTime
  eventEnd           DateTime
  canBeViewdBy       EventCanView
  hostedByCommitee   Committee?   @relation(fields: [hostedByCommiteeId], references: [id])
  hostedByCommiteeId Int?
  createdBy          User?        @relation(fields: [createdById], references: [id])
  createdById        Int?

  takesRegistration  Boolean
  places             Int                 @default(0)
  registrationStart  DateTime
  registrationEnd    DateTime
  waitingList        Boolean
  eventRegistrations EventRegistration[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ScreenPage ScreenPage[]
  cabinEvent Booking[]

  // Legacy from old database
  company     Boolean @default(false) // If a plus one is allowed
  lead        String?
  extraFields Json?   @db.Json

  @@unique([order, name])
}

model EventTagEvent {
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  tag     EventTag @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([eventId, tagId])
}

enum SpecialEventTags {
  COMPANY_PRESENTATION
}

model EventTag {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String
  colorR        Int
  colorG        Int
  colorB        Int
  special       SpecialEventTags? @unique
  EventTagEvent EventTagEvent[]
  ScreenPage    ScreenPage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventRegistration {
  id        Int             @id @default(autoincrement())
  event     Event           @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User?           @relation(fields: [userId], references: [id])
  userId    Int?
  contact   ContactDetails? @relation(fields: [contactId], references: [id])
  contactId Int?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  note      String?

  // Legacy from old database
  manuallyPaid      Boolean @default(false)
  company           Boolean @default(false) // This is if a registrations has a plus one.
  extraFieldChoices Json?   @db.Json

  @@unique([eventId, userId])
}
